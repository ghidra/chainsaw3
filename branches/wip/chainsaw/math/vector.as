package chainsaw.math{	public class vector{ //extends ?		//------------------------------------------------------		public var _x	:	Number;		public var _y	:	Number;		public var _z	:	Number;				public function vector(a:Number=0,b:Number=0,c:Number=0):void{			_x=a;			_y=b;			_z=c;		}		//------------------------------------------------------		//-------------vector math------------------------------		public function normalize():vector{			var l:Number = length();			if(l == 0){//if magnitude comes back as 0 avoid dividing by 0				return new vector (0,0,0);			}else{				return new vector (_x/l,_y/l,_z/l);			}		}		public function length():Number{			return Math.sqrt((_x*_x)+(_y*_y)+(_z*_z));		}		public function dot(v:vector):Number{			return ( _x * v._x + _y * v._y + _z * v._z );		}		public function cross(v:vector):vector{			return new vector(	(_y * v._z) - (_z * v._y) ,								(_z * v._x) - (_x * v._z) ,								(_x * v._y) - (_y * v._x));		}		public function add(v:vector):vector{			return new vector(	_x + v._x,							  	_y + v._y,							  	_z + v._z );		}		public function multiply_m3(m:matrix3):void{			//trace("####a:"+m._n11+"	b:"+m._n12+"	c:"+m._n13+"	d:"+m._n14+"	e:"+m._n21+"	f:"+m._n22+"	g:"+m._n23+"	h:"+m._n24+"	i:"+m._n31+"	j:"+m._n32+"	k:"+m._n33+"	l:"+m._n34+"	m:"+m._n41+"	n:"+m._n42+"	o:"+m._n43+"	p:"+m._n44)			var x = m._n11 * _x + m._n12 * _y + m._n13 * _z;			var y = m._n21 * _x + m._n22 * _y + m._n23 * _z;			var z = m._n31 * _x + m._n32 * _y + m._n33*  _z;			//trace("x:"+x+"	y:"+y+"	z:"+z+"	w:"+w)			_x = x;			_y = y;			_z = z;		}		public function multiply_m4(m:matrix4):void{			//trace("####a:"+m._n11+"	b:"+m._n12+"	c:"+m._n13+"	d:"+m._n14+"	e:"+m._n21+"	f:"+m._n22+"	g:"+m._n23+"	h:"+m._n24+"	i:"+m._n31+"	j:"+m._n32+"	k:"+m._n33+"	l:"+m._n34+"	m:"+m._n41+"	n:"+m._n42+"	o:"+m._n43+"	p:"+m._n44)			var x = m._n11 * _x + m._n12 * _y + m._n13 * _z + m._n14;			var y = m._n21 * _x + m._n22 * _y + m._n23 * _z + m._n24;			var z = m._n31 * _x + m._n32 * _y + m._n33 * _z + m._n34;			//trace("x:"+x+"	y:"+y+"	z:"+z+"	w:"+w)			_x = x;			_y = y;			_z = z;		}		public function multiply_scalar(s:Number):vector{			return new vector ( _x * s , _y * s, _z * s );		}		public function copy(v:vector):vector{			return new vector( v._x, v._y, v._z );		}	}}
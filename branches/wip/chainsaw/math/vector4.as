package chainsaw.math{	import chainsaw.math.vector	public class vector4 extends vector{ //extends ?		//------------------------------------------------------		/*public var _x	:	Number;		public var _y	:	Number;		public var _z	:	Number;		public var _w	:	Number;				public function vector4(x:Number=0,y:Number=0,z:Number=0,w:Number=1):void{			_x=x;			_y=y;			_z=z;			_w=w;		}*/		public var _w:Number;		public function vector4(a:Number=0,b:Number=0,c:Number=0,d:Number=1):void{			_x=a;			_y=b;			_z=c			_w=d;		}		override public function length():Number{			return Math.sqrt((_x*_x)+(_y*_y)+(_z*_z)+(_w*_w));		} 		public function dot4(v:vector4):Number{			return (_x * v._x + _y * v._y + _z * v._z + _w * v._w);		}		override public function multiply_m4(m:matrix4):void{			//trace("####a:"+m._n11+"	b:"+m._n12+"	c:"+m._n13+"	d:"+m._n14+"	e:"+m._n21+"	f:"+m._n22+"	g:"+m._n23+"	h:"+m._n24+"	i:"+m._n31+"	j:"+m._n32+"	k:"+m._n33+"	l:"+m._n34+"	m:"+m._n41+"	n:"+m._n42+"	o:"+m._n43+"	p:"+m._n44)			var x = m._n11 * _x + m._n12 * _y + m._n13 * _z + m._n14 * _w;			var y = m._n21 * _x + m._n22 * _y + m._n23 * _z + m._n24 * _w;			var z = m._n31 * _x + m._n32 * _y + m._n33 * _z + m._n34 * _w;			var w = m._n41 * _x + m._n42 * _y + m._n43 * _z + m._n44 * _w;			//trace("x:"+x+"	y:"+y+"	z:"+z+"	w:"+w)			_x = x;			_y = y;			_z = z;			_w = w;		}		//------------------------------------------------------		//-------------vector math------------------------------		/*public function normalize(v:vector4):vector4{			var nlength:Number = Math.sqrt( (v._x*v._x) + (v._y*v._y) + (v._z*v._z) + (v._w*v._w));			if(nlength == 0){//if magnitude comes back as 0 avoid dividing by 0				return new vector4 (0,0,0);			}else{				return new vector4 (v._x / nlength,v._y / nlength,v._z / nlength);			}		}		public function d_p(v1:vector4,v2:vector4):Number{			return ( v1._x * v2._x + v1._y * v2._y + v1._z * v2._z );		}		public function d_p4( v1:vector4, v2:vector4 ):Number{//dot product			//trace(( v1.nx * v2.nx + v1.ny * v2.ny + v2.nz * v1.nz ) + " " +);//there is NaN coming in somewhere			return ( v1._x * v2._x + v1._y * v2._y + v1._z * v2._z + v1._w * v2._w);					}		public function c_p( v1:vector4, v2:vector4 ):vector4{//cross product			return new vector4(	(v1._y * v2._z) - (v1._z * v2._y) ,								(v1._z * v2._x) - (v1._x * v2._z) ,								(v1._x * v2._y) - (v1._y * v2._x));		}		public function polynormal( p1:vector4, p2:vector4, p3:vector4 ):void{			var v1 = new vector4( (p1._x - p2._x) , (p1._y - p2._y) , (p1._z - p2._z) );			var v2 = new vector4( (p1._x - p3._x) , (p1._y - p3._y) , (p1._z - p3._z) );						var cp = c_p(v1,v2);			var norm = normalize(cp);			var d = d_p(norm,p1);						this._x=norm._x;			this._y=norm._y;			this._z=norm._z;			this._w=d;		}		public function mult_v_m4(v:vector4,m:matrix4):void{			//trace("####a:"+m._n11+"	b:"+m._n12+"	c:"+m._n13+"	d:"+m._n14+"	e:"+m._n21+"	f:"+m._n22+"	g:"+m._n23+"	h:"+m._n24+"	i:"+m._n31+"	j:"+m._n32+"	k:"+m._n33+"	l:"+m._n34+"	m:"+m._n41+"	n:"+m._n42+"	o:"+m._n43+"	p:"+m._n44)			var x = m._n11 * v._x + m._n12 * v._y + m._n13 * v._z + m._n14 * v._w;			var y = m._n21 * v._x + m._n22 * v._y + m._n23 * v._z + m._n24 * v._w;			var z = m._n31 * v._x + m._n32 * v._y + m._n33* v._z + m._n34 * v._w;			var w = m._n41* v._x + m._n42* v._y + m._n43* v._z + m._n44 * v._w;			//trace("x:"+x+"	y:"+y+"	z:"+z+"	w:"+w)			this._x=x;			this._y=y;			this._z=z;			this._w=w;		}		public function mult_v_m3(v:vector4,m:matrix3):void{			//trace("####a:"+m._n11+"	b:"+m._n12+"	c:"+m._n13+"	d:"+m._n14+"	e:"+m._n21+"	f:"+m._n22+"	g:"+m._n23+"	h:"+m._n24+"	i:"+m._n31+"	j:"+m._n32+"	k:"+m._n33+"	l:"+m._n34+"	m:"+m._n41+"	n:"+m._n42+"	o:"+m._n43+"	p:"+m._n44)			var x = m._n11 * v._x + m._n12 * v._y + m._n13 * v._z;			var y = m._n21 * v._x + m._n22 * v._y + m._n23 * v._z;			var z = m._n31 * v._x + m._n32 * v._y + m._n33* v._z;			//trace("x:"+x+"	y:"+y+"	z:"+z+"	w:"+w)			this._x=x;			this._y=y;			this._z=z;		}		//------------------------------------------------------		//-------------quaternian math--------------------------		//------------------------------------------------------		public function mult_quats(q1:vector4,q2:vector4):void{			var a = (q1._z - q1._y) * (q2._y - q2._z);		   	var b = (q1._w + q1._x) * (q2._w + q2._x);		   	var c = (q1._w - q1._x) * (q2._y + q2._z);		   	var d = (q1._y + q1._z) * (q2._w - q2._x);		   	var e = (q1._z - q1._x) * (q2._x - q2._y);		   	var f = (q1._z + q1._x) * (q2._x + q2._y);		   	var g = (q1._w + q1._y) * (q2._w - q2._z);		   	var h = (q1._w - q1._y) * (q2._w + q2._z);		   	var i = (f + g + h);		   	var j = Math.sqrt(e + i);//0.5 * (e + i)			this._x=(b + j - i);			this._y=(c + j - h);			this._z=(d + j - g);			this._w=(a + j - f);		}*/			}}
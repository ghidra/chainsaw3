package chainsaw.ui{	import flash.display.Stage;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;		import chainsaw.ui.chainsaw_explorer;	import chainsaw.ui.fps_counter;	import chainsaw.scene.camera;	import chainsaw.math.vector4;	import chainsaw.scene.renderer;		public class userinput	{		static const RIGHT = 37;		static const LEFT = 39;		static const UP = 38;		static const DOWN = 40;		private var keyPressedRight:Boolean;		private var keyPressedLeft:Boolean;		private var keyPressedUp:Boolean;		private var keyPressedDown:Boolean;				static const FRAMESPERSECOND = 49;//1		private var fps:Boolean;				static const SCENEINFO = 50;//2		private var scnfo:Boolean;						private var _renderer:renderer;		private var _stage:Stage;				private var _explorer:chainsaw_explorer;//make that explorer thing yo				//public var focus_manager:FocusManager=new FocusManager(this);								//private var windows:Array = new Array();//array to hold any floating windows				public function userinput(r:renderer,s:Stage):void{			_renderer=r;			_stage=s;			s.addEventListener(KeyboardEvent.KEY_DOWN , keypressed);			s.addEventListener(KeyboardEvent.KEY_UP , keyreleased);			//s.addEventListener(MouseEvent.MOUSE_MOVE , fps_mouse);		}		public function keypressed(e:KeyboardEvent):void{			//trace(e.keyCode)			switch (e.keyCode) {				case LEFT: 					keyPressedRight=true;					break;				case RIGHT:					keyPressedLeft=true;					break;				case UP:					keyPressedUp=true;					break;				case DOWN:					keyPressedDown=true;					break;				case FRAMESPERSECOND://1					if(fps==false){						this._stage.addChild(new fps_counter());						//windows.push( new window("fps",false,true) );						fps=true;					}else{						//trace(windows);						fps=false;					}					break;				case SCENEINFO://1					if(scnfo==false){						//trace("make");						_stage.addChild(_explorer=new chainsaw_explorer(_renderer,_stage));						scnfo=true;					}else{						//trace("remove");						scnfo=false;						_stage.removeChild(_explorer);					}					break;			}		}		public function keyreleased(e:KeyboardEvent):void{			switch (e.keyCode) {				case LEFT: 					keyPressedRight=false;					break;				case RIGHT:					keyPressedLeft=false;					break;				case UP:					keyPressedUp=false;					break;				case DOWN:					keyPressedDown=false;					break;			}		}		public function _refresh():void{			//--------------------------------------------			if(keyPressedRight){				_renderer.trans_s(1);			}			if(keyPressedLeft){ 				_renderer.trans_s(-1);			}			if(keyPressedUp){ 				_renderer.trans_o(-1);				//this._obj._trm.rotateX(-.01);			}			if(keyPressedDown){				//_renderer._camera.change_fov(50);				_renderer.trans_o(1);				//this._obj._trm.rotateX(.01);			}			//--------------------------------------------						if(fps==true){				/*fps_text = new TextField();				this.addChild(fps_text);								this.format.font = "Verdana";				this.format.color = 0x000000;				this.format.size = 10;				fps_text.autoSize = TextFieldAutoSize.LEFT;				fps_text.defaultTextFormat = format;				fps_text.text = "-- FPS ---- AV";*/			}		}		//--------------------------------		/*public function fps_mouse(e:MouseEvent):void{			var middle_x:int = _stage.stageWidth/2;			var middle_y:int = _stage.stageHeight/2;						var mouse_direction:vector4 = new vector4();			var mouse_sensitivity:Number = 100;			var max_angle:Number=1;						if( _stage.mouseX == middle_x && _stage.mouseY == middle_y ){//mouse hasn't moved				return;			}else{//mouse has moved				mouse_direction._x = (middle_x - _stage.mouseX)/mouse_sensitivity;				mouse_direction._y = (middle_y - _stage.mouseY)/mouse_sensitivity;								//_stage.mouseX = middle_x;				//_stage.mouseY = middle_y;			}			//trace(_stage.stageWidth)(_stage.mouseX);		}*/		//--------------------------------	}}
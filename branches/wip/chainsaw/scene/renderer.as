package chainsaw.scene{	import flash.display.Shape;//import flash.display.Sprite;		import chainsaw.math.vector;	import chainsaw.math.vector4;	import chainsaw.math.matrix4;	import chainsaw.math.matrix3;		import chainsaw.scene.camera;	import chainsaw.scene.scene;		import chainsaw.instance.instance;	import chainsaw.geometry.geometry;		public class renderer extends camera{				private var _drawarray : Array = new Array();		public var _scene	:	scene;		public var _screen :	Shape = new Shape();				public function renderer(scn:scene):void{			_scene = scn;//pass in the scene			_scene.addChild(_screen);//add the screen to the stage		}		//---------------------------------------------		public function renderscene():void{			_drawarray = new Array();//this._drawarray.length=100000;			for(var i in _scene._scene){//for eash object in array of objects								var nstance	:	instance		=	_scene._scene[i];//the instance to object				var nst_arr	:	Array 			= 	_scene._scene[i]._obj;//the array of objects				var ref_num	:	Number 			= 	_scene._scene[i]._pointer;//the reference number to object				var ref_arr : 	Array 			= 	_scene._objects[ref_num]._obj;//the array of objects				var geo_obj : 	Object 			= 	_scene._objects[ref_num];												_drawarray.push(nstance.render_collect( this ));							}			draw_scene();			//if(_fps==true) calc_fps();		}		private function draw_scene():void{			/*			_drawarray[]				= array of each instances draw data			_drawarray[][] 				= each object in instances object array			_drawarray[][][] 			= each polygon data array			_drawarray[][][][0] 		= 'nada'			_drawarray[][][][1] 		= poly points array			_drawarray[][][][1][n] 		= poly points			_drawarray[][][][1][n]._x 	= scalar			_drawarray[][][][2] 		= depth of poly 			*/			var depth_sorted : Array = new Array(); 			this._screen.graphics.clear();			//trace("*************************");			for(var a in this._drawarray){//go through array start from 0				for(var b in _drawarray[a]){					//for (var c in _drawarray[a][b]){						depth_sorted.push(_drawarray[a][b]);					//}				}			}						for (var d in depth_sorted){				//for (var e in depth_sorted[d][1]) {					this._screen.graphics.lineStyle(1, 0x000000, 100);					var p:Number=-1;									while(++p < depth_sorted[d][1].length){											if(p==0){							//trace("move to x:"+depth_sorted[d][1][p]._x+"	y:"+depth_sorted[d][1][p]._y);							//trace("move to x:"+this._drawarray[a][1][1][0]._x+"	y:"+this._drawarray[a][1]._y);							var endx:Number = depth_sorted[d][1][p]._x;							var endy:Number = depth_sorted[d][1][p]._y;							this._screen.graphics.moveTo(endx,endy);						}else{							//trace("draw to x:"+this._drawarray[a][1][p]._x+"	y:"+this._drawarray[a][1][p]._y);							this._screen.graphics.lineTo(depth_sorted[d][1][p]._x,depth_sorted[d][1][p]._y);						}						//trace(p);;					}					this._screen.graphics.lineTo(endx,endy);					//this._screen.graphics.endFill();				//}			}		}		//------------------		//------------------	}}